[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-coder"
version = "0.1.0"
description = "AI-powered software development automation toolkit using Claude Code CLI and MCP servers for intelligent code analysis, testing, and implementation workflows"
authors = [
    {name = "Marcus Jellinghaus", email = "Marcus@Jellinghaus.ch"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "claude-code-sdk",
    "GitPython>=3.1.0",
    "structlog>=23.2.0",
    "python-json-logger>=3.3.0",
    "pyperclip>=1.8.2",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mcp-code-checker @ git+https://github.com/MarcusJellinghaus/mcp-code-checker.git",
]

[project.optional-dependencies]
dev = [
    "pytest-asyncio",
    "types-pyperclip",
    "mcp-server-filesystem @ git+https://github.com/MarcusJellinghaus/mcp_server_filesystem.git",
]

[project.scripts]
mcp-coder = "mcp_coder.cli.main:main"

[project.urls]
"Homepage" = "https://github.com/MarcusJellinghaus/mcp_coder"
"Repository" = "https://github.com/MarcusJellinghaus/mcp_coder"
"Bug Tracker" = "https://github.com/MarcusJellinghaus/mcp_coder/issues"
"Documentation" = "https://github.com/MarcusJellinghaus/mcp_coder#readme"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
mcp_coder = ["prompts/*.md"]

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "git_integration: tests with file system git operations (repos, commits)", 
    "claude_integration: tests requiring Claude CLI/API (network, auth needed)",
    "formatter_integration: tests for code formatter integration (black, isort)"
]
# run usually with -m "not git_integration and not claude_integration and not formatter_integration"  for the fast unit tests
# use e.g. -m "git_integration or claude_integration or formatter_integration" to run a group of the slower tests

# Default pytest options:
# --strict-markers: Fail if unknown markers are used (prevents typos)
# --tb=short: Show concise error tracebacks (not full stack traces)
# -v: Verbose output showing individual test names
addopts = ["--strict-markers", "--tb=short", "-v"]

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.isort]
profile = "black"
line_length = 88
float_to_top = true

[tool.pylint.messages_control]
# W1203: Disable lazy % formatting requirement - prefer f-strings for readability
disable = ["W1203"]

[tool.mypy]
python_version = "3.11"

[[tool.mypy.overrides]]
module = ["pytest.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["mcp.server.fastmcp"]
ignore_missing_imports = true
