name: Python CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-forbidden-folders:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for forbidden folders in PR
      run: |
        echo "Checking for forbidden folders in pull request..."
        
        # Function to check for folder existence case-insensitively
        check_forbidden_folder() {
          local pattern="$1"
          local description="$2"
          
          # Use find with case-insensitive matching
          if find . -type d -ipath "*${pattern}*" -print -quit | grep -q .; then
            echo "❌ ERROR: Found forbidden folder matching '${pattern}'"
            echo "Description: ${description}"
            find . -type d -ipath "*${pattern}*" | sed 's/^/ Found: /'
            return 1
          else
            echo "✅ No forbidden folder found for pattern: ${pattern}"
            return 0
          fi
        }
        
        # Check for forbidden folders
        ERROR=0
        
        check_forbidden_folder "pr_info/steps" "Temporary development steps folder" || ERROR=1
        check_forbidden_folder "pr_info/.conversations" "Temporary conversation history folder" || ERROR=1
        check_empty_folder "docs/tests/performance_data/prof" "Profiler output folder should be empty in PRs" || ERROR=1
        
        if [ $ERROR -eq 1 ]; then
          echo ""
          echo "❌ PULL REQUEST BLOCKED: Forbidden folders detected!"
          echo "These folders should not be included in pull requests."
          echo "Please remove them and update your .gitignore if necessary."
          echo "Note: These folders are allowed in regular commits, just not in PRs."
          exit 1
        else
          echo ""
          echo "✅ All checks passed! No forbidden folders found."
        fi

  test:
    runs-on: ubuntu-latest
    needs: [check-forbidden-folders]
    if: always() && (github.event_name != 'pull_request' || needs.check-forbidden-folders.result == 'success')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .
        python -m pip install .[dev]
        
    - name: Check formatting with black
      id: black
      run: black --check src tests
      continue-on-error: true
        
    - name: Check imports with isort
      id: isort
      run: isort --check --profile=black --float-to-top src tests
      continue-on-error: true
        
    - name: Check for errors with pylint
      id: pylint
      run: pylint -E ./src ./tests
      continue-on-error: true
        
    - name: Run unit tests (fast)
      id: unit-tests
      run: pytest -m "not git_integration and not claude_cli_integration and not claude_api_integration and not formatter_integration and not github_integration" --junitxml=unit-tests.xml
      continue-on-error: true
        
    - name: Run integration tests
      id: integration-tests
      # Note: Claude integration tests are skipped in CI (no Claude CLI/API available)
      # Only runs: git_integration, formatter_integration, github_integration
      run: pytest -m "git_integration or formatter_integration or github_integration" --junitxml=integration-tests.xml
      continue-on-error: true
        
    - name: Check type hints with mypy
      id: mypy
      run: mypy --strict src tests
      continue-on-error: true
      
    - name: Summarize results
      if: always()
      run: |
        echo "CI checks completed. Review logs for any errors or warnings."
        
        ERROR=0
        [[ "${{ steps.black.outcome }}" == "failure" ]] && { echo "❌ Black formatting check failed"; ERROR=1; } || echo "✅ Black formatting check passed"
        [[ "${{ steps.isort.outcome }}" == "failure" ]] && { echo "❌ isort import check failed"; ERROR=1; } || echo "✅ isort import check passed"
        [[ "${{ steps.pylint.outcome }}" == "failure" ]] && { echo "❌ pylint error check failed"; ERROR=1; } || echo "✅ pylint error check passed"
        [[ "${{ steps.unit-tests.outcome }}" == "failure" ]] && { echo "❌ unit tests failed"; ERROR=1; } || echo "✅ unit tests passed"
        [[ "${{ steps.integration-tests.outcome }}" == "failure" ]] && { echo "❌ integration tests failed"; ERROR=1; } || echo "✅ integration tests passed"
        [[ "${{ steps.mypy.outcome }}" == "failure" ]] && { echo "❌ mypy type checking failed"; ERROR=1; } || echo "✅ mypy type checking passed"
        
        exit $ERROR
